using System.Net;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using Azure;
using FluentAssertions;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using SpaceTechList.Api.Constants;
using SpaceTechList.Api.Dtos;
using SpaceTechList.Api.Models;
using System.Linq;

namespace SpaceTechList.Api.Tests;

public class SpaceTechControllerTests
{
    private readonly WebApplicationFactory<Program> factory = new SpaceTechListTestApplication();

    private HttpClient httpClient;

    private readonly JsonSerializerOptions jsonSerializerOptions = new()
    { PropertyNameCaseInsensitive = true };

    private readonly SpaceTechDto mockSpaceTech = new SpaceTechDto
    {
        IdCode = "5a8bf5c4960002171ded384a",
        Title = "Aeroelastic Wing Shaping",
        Description = "NASA has developed a new method of wing shaping using distributed propulsion " +
                "that can revolutionize the design of aircraft. Distributed propulsion aeroelastic wing shaping " +
                "is a new aircraft concept. Most commercial aircraft are still utilizing one gas-turbine engine " +
                "per wing. By contrast, distributed propulsion envisions the use of multiple small electrically " +
                "powered propulsion units distributed along the wings. By taking advantage of increased wing " +
                "flexibility afforded by the use of light-weight materials such as composites, the aeroelastic " +
                "deflection of a wing can be actively shaped in-flight for optimal aerodynamic efficiency by " +
                "varying the amount of thrust generated by the propulsion units. By using distributed propulsion, " +
                "the optimal wing shape can be used for other phases such as takeoff, landing, and in-flight " +
                "maneuvers. In addition, distributed propulsion can be leveraged for yaw and roll controls, " +
                "thus reducing the need for a full vertical tail size for weight savings. Thus, an entire aircraft " +
                "design can be developed more creatively using distributed propulsion concepts for reduced fuel burn. " +
                "Initial performance analysis indicates that this concept could achieve about 4% increase in lift-to-drag " +
                "ratio.",
        Topic = "aerospace",
        MediaUrl = "https://technology.nasa.gov/t2media/tops/img/TOP2-251/ARC-17372-1_1388x1050.jpg"
    };

    [SetUp]
    public async Task Setup()
    {
        httpClient = factory.WithWebHostBuilder(builder =>
                builder.ConfigureServices(services =>
                {
                    services.AddDbContextPool<Db.SpaceTechListDbContext>(options =>
                        options.UseInMemoryDatabase("Testing2"));

                }))
            .CreateClient();

        var registerRequestBody = new StringContent(
        JsonSerializer.Serialize(
            new RegisterUserDto
            {
                FirstName = "Bob",
                LastName = "Builder",
                Email = "bob@gmail.com",
                Password = "password123"

            }), Encoding.UTF8, "application/json");

        var registerResponse = await httpClient.PostAsync(Routes.registerRoute, registerRequestBody);

        Assert.That(registerResponse.StatusCode, Is.EqualTo(HttpStatusCode.Created));
    }

    [Test]
    public async Task Should_Ping()
    {
        var response = await httpClient.GetAsync("/ping");

        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
    }

    [Test]
    public async Task Should_Get_Space_Tech_From_Public_API()
    {
        var nasaApiResponse = await httpClient.GetAsync(Routes.spaceTechNASAApiRoute);

        var responseContent = await nasaApiResponse.Content.ReadFromJsonAsync<List<SpaceTechDto>>();

        var expectedContent = new SpaceTechDto
        {
            IdCode = "59fa10809600022a4d1c7751",
            Title = "Turbofan Engine Acoustic Liner Design and Analysis Tools",
            Description = "NASA Langley Research Center has developed two tools for " +
                "turbofan engine acoustic liner design and analysis. The first is a statistical " +
                "approach for broadband liner design and assessment. The second is graphical " +
                "software to design and analyze resonant channels in acoustic liners.",
            Topic = "aerospace",
            MediaUrl = "https://technology.nasa.gov/t2media/tops/img/LAR-TOPS-185/Front.jpg"
        };

        Assert.That(nasaApiResponse.StatusCode, Is.EqualTo(HttpStatusCode.OK));

        responseContent.ElementAt(0).Should().BeEquivalentTo(expectedContent);
    }

    [Test]
    public async Task Should_Add_Space_Tech_To_Saved_List()
    {
        var saveSpaceTechRequestBody = new StringContent(
        JsonSerializer.Serialize(mockSpaceTech), Encoding.UTF8, "application/json");

        var savedSpaceTechResponse = await httpClient.PostAsync(Routes.spaceTechSavedListRoute, saveSpaceTechRequestBody);

        var responseContent = await savedSpaceTechResponse.Content.ReadFromJsonAsync<SpaceTech>();

        var today = DateTimeOffset.UtcNow;

        Assert.Multiple(() =>
        {
            Assert.That(savedSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.Created));

            Assert.That(responseContent.Id, Is.EqualTo(1));

            Assert.That(responseContent.IdCode, Is.EqualTo(mockSpaceTech.IdCode));

            Assert.That(responseContent.Title, Is.EqualTo(mockSpaceTech.Title));

            Assert.That(responseContent.Description, Is.EqualTo(mockSpaceTech.Description));

            Assert.That(responseContent.Topic, Is.EqualTo(mockSpaceTech.Topic));

            Assert.That(responseContent.MediaUrl, Is.EqualTo(mockSpaceTech.MediaUrl));

            Assert.That(responseContent.CreatedDate.ToString(), Does.Contain(today.ToString()));

            Assert.That(responseContent.UpdatedDate.ToString(), Does.Contain(today.ToString()));
        });
    }

    [Test]
    public async Task Should_Not_Add_Duplicate_Space_Tech()
    {
        var saveSpaceTechRequestBody = new StringContent(
        JsonSerializer.Serialize(mockSpaceTech), Encoding.UTF8, "application/json");

        var savedSpaceTechResponse = await httpClient.PostAsync(Routes.spaceTechSavedListRoute, saveSpaceTechRequestBody);

        Assert.That(savedSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.Created));

        var savedSpaceTechResponse2 = await httpClient.PostAsync(Routes.spaceTechSavedListRoute, saveSpaceTechRequestBody);

        Assert.That(savedSpaceTechResponse2.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest));
    }

    [Test]
    public async Task Should_Get_All_Space_Tech_From_Saved_List()
    {
        var saveSpaceTechRequestBody = new StringContent(
        JsonSerializer.Serialize(mockSpaceTech), Encoding.UTF8, "application/json");

        var savedSpaceTechResponse = await httpClient.PostAsync(Routes.spaceTechSavedListRoute, saveSpaceTechRequestBody);

        Assert.That(savedSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.Created));

        var secondSpaceTech = new SpaceTechDto
        {
            IdCode = "59fa10809600022a4d1c7751",
            Title = "Turbofan Engine Acoustic Liner Design and Analysis Tools",
            Description = "NASA Langley Research Center has developed two tools for " +
                "turbofan engine acoustic liner design and analysis. The first is a statistical " +
                "approach for broadband liner design and assessment. The second is graphical " +
                "software to design and analyze resonant channels in acoustic liners.",
            Topic = "aerospace",
            MediaUrl = "https://technology.nasa.gov/t2media/tops/img/LAR-TOPS-185/Front.jpg"
        };

        var secondSaveSpaceTechRequestBody = new StringContent(
        JsonSerializer.Serialize(secondSpaceTech), Encoding.UTF8, "application/json");

        var secondSavedSpaceTechResponse = await httpClient.PostAsync(Routes.spaceTechSavedListRoute,
            secondSaveSpaceTechRequestBody);

        Assert.That(savedSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.Created));

        var getAllSpaceTechResponse = await httpClient.GetAsync(Routes.spaceTechSavedListRoute);

        var responseContent = await getAllSpaceTechResponse.Content.ReadFromJsonAsync<List<SpaceTech>>();

        var today = DateTimeOffset.UtcNow;

        Assert.Multiple(() =>
        {
            Assert.That(getAllSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.OK));

            Assert.That(responseContent.Count, Is.EqualTo(2));

            Assert.That(responseContent[1].Id, Is.EqualTo(2));

            Assert.That(responseContent[1].IdCode, Is.EqualTo(secondSpaceTech.IdCode));

            Assert.That(responseContent[1].Title, Is.EqualTo(secondSpaceTech.Title));

            Assert.That(responseContent[1].Description, Is.EqualTo(secondSpaceTech.Description));

            Assert.That(responseContent[1].Topic, Is.EqualTo(secondSpaceTech.Topic));

            Assert.That(responseContent[1].MediaUrl, Is.EqualTo(secondSpaceTech.MediaUrl));

            Assert.That(responseContent[1].CreatedDate.ToString(), Does.Contain(today.ToString()));

            Assert.That(responseContent[1].UpdatedDate.ToString(), Does.Contain(today.ToString()));
        });
    }

    [Test]
    public async Task Should_Delete_Space_Tech_From_Saved_List()
    {
        var saveSpaceTechRequestBody = new StringContent(
        JsonSerializer.Serialize(mockSpaceTech), Encoding.UTF8, "application/json");

        var savedSpaceTechResponse = await httpClient.PostAsync(Routes.spaceTechSavedListRoute, saveSpaceTechRequestBody);

        Assert.That(savedSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.Created));

        var deleteSavedSpaceTechResponse = await httpClient.DeleteAsync(Routes.spaceTechSavedListRoute + "/1");

        Assert.That(deleteSavedSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.OK));

        var getAllSpaceTechResponse = await httpClient.GetAsync(Routes.spaceTechSavedListRoute);

        var responseContent = await getAllSpaceTechResponse.Content.ReadFromJsonAsync<List<SpaceTech>>();

        Assert.That(getAllSpaceTechResponse.StatusCode, Is.EqualTo(HttpStatusCode.OK));

        Assert.That(responseContent.Count, Is.EqualTo(0));

    }
}
